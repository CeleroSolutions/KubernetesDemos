{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.22.6.54827",
      "templateHash": "9526214633006309261"
    }
  },
  "parameters": {
    "TenantId": {
      "type": "string"
    },
    "AdminGroupObjectId": {
      "type": "string"
    },
    "Location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "Environment": {
      "type": "string",
      "defaultValue": "DEMO"
    },
    "VnetAddressSpace": {
      "type": "string",
      "defaultValue": "10.0.0.0/16"
    },
    "SubnetAddressSpaceDemoPod": {
      "type": "string",
      "defaultValue": "10.0.0.0/20"
    },
    "SubnetAddressSpaceSystemPod": {
      "type": "string",
      "defaultValue": "10.0.16.0/22"
    },
    "SubnetAddressSpaceDemoNode": {
      "type": "string",
      "defaultValue": "10.0.20.0/24"
    },
    "SubnetAddressSpaceSystemNode": {
      "type": "string",
      "defaultValue": "10.0.21.0/24"
    },
    "SubnetAddressSpaceIngress": {
      "type": "string",
      "defaultValue": "10.0.22.0/24"
    },
    "KubernetesVersion": {
      "type": "string",
      "defaultValue": "1.27.3"
    },
    "NodeSizeSystemPool": {
      "type": "string",
      "defaultValue": "Standard_D2ads_v5",
      "allowedValues": [
        "Standard_D8ads_v5",
        "Standard_D4ads_v5",
        "Standard_D2ads_v5",
        "Standard_E8ads_v5",
        "Standard_E4ads_v5",
        "Standard_E2ads_v5"
      ]
    },
    "NodeSizeDemoPool": {
      "type": "string",
      "defaultValue": "Standard_D4ads_v5",
      "allowedValues": [
        "Standard_D8ads_v5",
        "Standard_D4ads_v5",
        "Standard_D2ads_v5",
        "Standard_E8ads_v5",
        "Standard_E4ads_v5",
        "Standard_E2ads_v5"
      ]
    },
    "InitialNodeCountDemoPool": {
      "type": "int",
      "defaultValue": 2
    },
    "MinimumNodeCountDemoPool": {
      "type": "int",
      "defaultValue": 2
    },
    "MaximumNodeCountDemoPool": {
      "type": "int",
      "defaultValue": 10
    }
  },
  "variables": {
    "Tags": {}
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleVirtualNetwork",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          },
          "VnetAddressSpace": {
            "value": "[parameters('VnetAddressSpace')]"
          },
          "SubnetAddressSpaceIngress": {
            "value": "[parameters('SubnetAddressSpaceIngress')]"
          },
          "SubnetAddressSpaceDemoNode": {
            "value": "[parameters('SubnetAddressSpaceDemoNode')]"
          },
          "SubnetAddressSpaceDemoPod": {
            "value": "[parameters('SubnetAddressSpaceDemoPod')]"
          },
          "SubnetAddressSpaceSystemNode": {
            "value": "[parameters('SubnetAddressSpaceSystemNode')]"
          },
          "SubnetAddressSpaceSystemPod": {
            "value": "[parameters('SubnetAddressSpaceSystemPod')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "8454702407263132302"
            }
          },
          "parameters": {
            "VnetAddressSpace": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "SubnetAddressSpaceSystemNode": {
              "type": "string"
            },
            "SubnetAddressSpaceSystemPod": {
              "type": "string"
            },
            "SubnetAddressSpaceDemoNode": {
              "type": "string"
            },
            "SubnetAddressSpaceDemoPod": {
              "type": "string"
            },
            "SubnetAddressSpaceIngress": {
              "type": "string"
            }
          },
          "variables": {
            "resourceNameVnet": "[format('VNET-KubernetesDemo-{0}', parameters('Environment'))]",
            "resourceNameSubnetSystemNode": "[format('SNET-KubernetesSystemNode-{0}', parameters('Environment'))]",
            "resourceNameSubnetSystemPod": "[format('SNET-KubernetesSystemPod-{0}', parameters('Environment'))]",
            "resourceNameSubnetDemoNode": "[format('SNET-KubernetesDemoNode-{0}', parameters('Environment'))]",
            "resourceNameSubnetDemoPod": "[format('SNET-KubernetesDemoPod-{0}', parameters('Environment'))]",
            "resourceNameSubnetIngress": "[format('SNET-KubernetesIngress-{0}', parameters('Environment'))]",
            "resourceNameNsgSystemNode": "[format('NSG-KubernetesSystemNode-{0}', parameters('Environment'))]",
            "resourceNameNsgSystemPod": "[format('NSG-KubernetesSystemPod-{0}', parameters('Environment'))]",
            "resourceNameNsgDemoNode": "[format('NSG-KubernetesDemoNode-{0}', parameters('Environment'))]",
            "resourceNameNsgDemoPod": "[format('NSG-KubernetesDemoPod-{0}', parameters('Environment'))]",
            "resourceNameNsgIngress": "[format('NSG-KubernetesIngress-{0}', parameters('Environment'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameVnet')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('VnetAddressSpace')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('resourceNameSubnetSystemNode')]",
                    "properties": {
                      "addressPrefix": "[parameters('SubnetAddressSpaceSystemNode')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgSystemNode'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('resourceNameSubnetSystemPod')]",
                    "properties": {
                      "addressPrefix": "[parameters('SubnetAddressSpaceSystemPod')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgSystemPod'))]"
                      },
                      "delegations": [
                        {
                          "name": "Microsoft.ContainerService/managedClusters",
                          "properties": {
                            "serviceName": "Microsoft.ContainerService/managedClusters"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "[variables('resourceNameSubnetDemoNode')]",
                    "properties": {
                      "addressPrefix": "[parameters('SubnetAddressSpaceDemoNode')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgDemoNode'))]"
                      }
                    }
                  },
                  {
                    "name": "[variables('resourceNameSubnetDemoPod')]",
                    "properties": {
                      "addressPrefix": "[parameters('SubnetAddressSpaceDemoPod')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgDemoPod'))]"
                      },
                      "delegations": [
                        {
                          "name": "Microsoft.ContainerService/managedClusters",
                          "properties": {
                            "serviceName": "Microsoft.ContainerService/managedClusters"
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "[variables('resourceNameSubnetIngress')]",
                    "properties": {
                      "addressPrefix": "[parameters('SubnetAddressSpaceIngress')]",
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgIngress'))]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgDemoNode'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgDemoPod'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgIngress'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgSystemNode'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNameNsgSystemPod'))]"
              ]
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameNsgSystemNode')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameNsgSystemPod')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameNsgDemoNode')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameNsgDemoPod')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[variables('resourceNameNsgIngress')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "securityRules": []
              }
            }
          ],
          "outputs": {
            "ResourceNameVirtualNetwork": {
              "type": "string",
              "value": "[variables('resourceNameVnet')]"
            },
            "ResourceIdVirtualNetwork": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('resourceNameVnet'))]"
            },
            "ResourceNameSubnetSystemNode": {
              "type": "string",
              "value": "[variables('resourceNameSubnetSystemNode')]"
            },
            "ResourceNameSubnetSystemPod": {
              "type": "string",
              "value": "[variables('resourceNameSubnetSystemPod')]"
            },
            "ResourceNameSubnetDemoNode": {
              "type": "string",
              "value": "[variables('resourceNameSubnetDemoNode')]"
            },
            "ResourceNameSubnetDemoPod": {
              "type": "string",
              "value": "[variables('resourceNameSubnetDemoPod')]"
            },
            "ResourceNameSubnetIngress": {
              "type": "string",
              "value": "[variables('resourceNameSubnetIngress')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleManagedIdentityControlPlane",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "ManagedIdentityDescription": {
            "value": "KubernetesDemoControlPlane"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "5848987574282170924"
            }
          },
          "parameters": {
            "ManagedIdentityDescription": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "resourceNameManagedIdentity": "[format('MI-{0}-{1}', parameters('ManagedIdentityDescription'), parameters('Environment'))]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[variables('resourceNameManagedIdentity')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]"
            }
          ],
          "outputs": {
            "ResourceIdManagedIdentity": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('resourceNameManagedIdentity'))]"
            },
            "PrincipalIdManagedIdentity": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('resourceNameManagedIdentity')), '2022-01-31-preview').principalId]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleResourceGroupPermissionsControlPlane",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleManagedIdentityControlPlane'), '2022-09-01').outputs.PrincipalIdManagedIdentity.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "3901282349044047380"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "roleIdManagedIdentityOperator": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/f1a07417-d97a-45cb-824c-7a7467783830', subscription().id)]",
            "roleIdNetworkContributor": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/4d97b98b-1d4f-4787-a291-c67834d212e7', subscription().id)]",
            "roleIdMonitoringMetricsPublisher": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb', subscription().id)]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdManagedIdentityOperator'), parameters('PrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdManagedIdentityOperator')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdNetworkContributor'), parameters('PrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdNetworkContributor')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdMonitoringMetricsPublisher'), parameters('PrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdMonitoringMetricsPublisher')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'moduleManagedIdentityControlPlane')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleLogAnalytics",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "13638322757656212260"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "resourceNameLogAnalytics": "[format('LOG-KubernetesDemo-{0}', parameters('Environment'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[variables('resourceNameLogAnalytics')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30
              }
            }
          ],
          "outputs": {
            "ResourceIdLogAnalytics": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('resourceNameLogAnalytics'))]"
            },
            "ResourceNameLogAnalytics": {
              "type": "string",
              "value": "[variables('resourceNameLogAnalytics')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "modulePrometheus",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "2371943576076688413"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            }
          },
          "variables": {
            "resourceNameMonitorWorkspace": "[format('MON-KubernetesDemo-{0}', parameters('Environment'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Monitor/accounts",
              "apiVersion": "2021-06-03-preview",
              "name": "[variables('resourceNameMonitorWorkspace')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {}
            }
          ],
          "outputs": {
            "ResourceIdDataCollectionRule": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Monitor/accounts', variables('resourceNameMonitorWorkspace')), '2021-06-03-preview').defaultIngestionSettings.dataCollectionRuleResourceId]"
            },
            "ResourceIdMonitorWorkspace": {
              "type": "string",
              "value": "[resourceId('Microsoft.Monitor/accounts', variables('resourceNameMonitorWorkspace'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "modulePrometheusRules",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          },
          "ResourceIdMonitorWorkspace": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'modulePrometheus'), '2022-09-01').outputs.ResourceIdMonitorWorkspace.value]"
          },
          "ResourceNameAks": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleKubernetes'), '2022-09-01').outputs.ResourceNameAksCluster.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "4571542075770989785"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "ResourceIdMonitorWorkspace": {
              "type": "string"
            },
            "ResourceNameAks": {
              "type": "string"
            }
          },
          "variables": {
            "resourceNameRuleGroupNode": "[format('RUGP-KubernetesDemoNode-{0}', parameters('Environment'))]",
            "resourceNameRuleGroupBase": "[format('RUGP-KubernetesDemoBase-{0}', parameters('Environment'))]"
          },
          "resources": [
            {
              "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
              "apiVersion": "2021-07-22-preview",
              "name": "[variables('resourceNameRuleGroupNode')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "description": "Node Recording Rules RuleGroup",
                "scopes": [
                  "[parameters('ResourceIdMonitorWorkspace')]"
                ],
                "clusterName": "[parameters('ResourceNameAks')]",
                "interval": "PT1M",
                "rules": [
                  {
                    "record": "instance:node_num_cpu:sum",
                    "expression": "count without (cpu, mode) (  node_cpu_seconds_total{job=\"node\",mode=\"idle\"})"
                  },
                  {
                    "record": "instance:node_cpu_utilisation:rate5m",
                    "expression": "1 - avg without (cpu) (  sum without (mode) (rate(node_cpu_seconds_total{job=\"node\", mode=~\"idle|iowait|steal\"}[5m])))"
                  },
                  {
                    "record": "instance:node_load1_per_cpu:ratio",
                    "expression": "(  node_load1{job=\"node\"}/  instance:node_num_cpu:sum{job=\"node\"})"
                  },
                  {
                    "record": "instance:node_memory_utilisation:ratio",
                    "expression": "1 - (  (    node_memory_MemAvailable_bytes{job=\"node\"}    or    (      node_memory_Buffers_bytes{job=\"node\"}      +      node_memory_Cached_bytes{job=\"node\"}      +      node_memory_MemFree_bytes{job=\"node\"}      +      node_memory_Slab_bytes{job=\"node\"}    )  )/  node_memory_MemTotal_bytes{job=\"node\"})"
                  },
                  {
                    "record": "instance:node_vmstat_pgmajfault:rate5m",
                    "expression": "rate(node_vmstat_pgmajfault{job=\"node\"}[5m])"
                  },
                  {
                    "record": "instance_device:node_disk_io_time_seconds:rate5m",
                    "expression": "rate(node_disk_io_time_seconds_total{job=\"node\", device!=\"\"}[5m])"
                  },
                  {
                    "record": "instance_device:node_disk_io_time_weighted_seconds:rate5m",
                    "expression": "rate(node_disk_io_time_weighted_seconds_total{job=\"node\", device!=\"\"}[5m])"
                  },
                  {
                    "record": "instance:node_network_receive_bytes_excluding_lo:rate5m",
                    "expression": "sum without (device) (  rate(node_network_receive_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
                  },
                  {
                    "record": "instance:node_network_transmit_bytes_excluding_lo:rate5m",
                    "expression": "sum without (device) (  rate(node_network_transmit_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
                  },
                  {
                    "record": "instance:node_network_receive_drop_excluding_lo:rate5m",
                    "expression": "sum without (device) (  rate(node_network_receive_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                  },
                  {
                    "record": "instance:node_network_transmit_drop_excluding_lo:rate5m",
                    "expression": "sum without (device) (  rate(node_network_transmit_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                  }
                ]
              }
            },
            {
              "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
              "apiVersion": "2021-07-22-preview",
              "name": "[variables('resourceNameRuleGroupBase')]",
              "location": "[parameters('Location')]",
              "properties": {
                "description": "Kubernetes Recording Rules RuleGroup - 0.1",
                "scopes": [
                  "[parameters('ResourceIdMonitorWorkspace')]"
                ],
                "clusterName": "[parameters('ResourceNameAks')]",
                "interval": "PT1M",
                "rules": [
                  {
                    "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
                    "expression": "sum by (cluster, namespace, pod, container) (  irate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\"}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (  1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                  },
                  {
                    "record": "node_namespace_pod_container:container_memory_working_set_bytes",
                    "expression": "container_memory_working_set_bytes{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                  },
                  {
                    "record": "node_namespace_pod_container:container_memory_rss",
                    "expression": "container_memory_rss{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                  },
                  {
                    "record": "node_namespace_pod_container:container_memory_cache",
                    "expression": "container_memory_cache{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                  },
                  {
                    "record": "node_namespace_pod_container:container_memory_swap",
                    "expression": "container_memory_swap{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                  },
                  {
                    "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_requests",
                    "expression": "kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                  },
                  {
                    "record": "namespace_memory:kube_pod_container_resource_requests:sum",
                    "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                  },
                  {
                    "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests",
                    "expression": "kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                  },
                  {
                    "record": "namespace_cpu:kube_pod_container_resource_requests:sum",
                    "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                  },
                  {
                    "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_limits",
                    "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                  },
                  {
                    "record": "namespace_memory:kube_pod_container_resource_limits:sum",
                    "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                  },
                  {
                    "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits",
                    "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ( (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1) )"
                  },
                  {
                    "record": "namespace_cpu:kube_pod_container_resource_limits:sum",
                    "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                  },
                  {
                    "record": "namespace_workload_pod:kube_pod_owner:relabel",
                    "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    label_replace(      kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"},      \"replicaset\", \"$1\", \"owner_name\", \"(.*)\"    ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (      1, max by (replicaset, namespace, owner_name) (        kube_replicaset_owner{job=\"kube-state-metrics\"}      )    ),    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                    "labels": {
                      "workload_type": "deployment"
                    }
                  },
                  {
                    "record": "namespace_workload_pod:kube_pod_owner:relabel",
                    "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                    "labels": {
                      "workload_type": "daemonset"
                    }
                  },
                  {
                    "record": "namespace_workload_pod:kube_pod_owner:relabel",
                    "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                    "labels": {
                      "workload_type": "statefulset"
                    }
                  },
                  {
                    "record": "namespace_workload_pod:kube_pod_owner:relabel",
                    "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"Job\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                    "labels": {
                      "workload_type": "job"
                    }
                  },
                  {
                    "record": ":node_memory_MemAvailable_bytes:sum",
                    "expression": "sum(  node_memory_MemAvailable_bytes{job=\"node\"} or  (    node_memory_Buffers_bytes{job=\"node\"} +    node_memory_Cached_bytes{job=\"node\"} +    node_memory_MemFree_bytes{job=\"node\"} +    node_memory_Slab_bytes{job=\"node\"}  )) by (cluster)"
                  },
                  {
                    "record": "cluster:node_cpu:ratio_rate5m",
                    "expression": "sum(rate(node_cpu_seconds_total{job=\"node\",mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m])) by (cluster) /count(sum(node_cpu_seconds_total{job=\"node\"}) by (cluster, instance, cpu)) by (cluster)"
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.AlertsManagement/prometheusRuleGroups', variables('resourceNameRuleGroupNode'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'moduleKubernetes')]",
        "[resourceId('Microsoft.Resources/deployments', 'modulePrometheus')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleGrafana",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          },
          "ResourceIdPrometheusWorkspace": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'modulePrometheus'), '2022-09-01').outputs.ResourceIdMonitorWorkspace.value]"
          },
          "AdminGroupObjectId": {
            "value": "[parameters('AdminGroupObjectId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "7452296291582708255"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "Environment": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "AdminGroupObjectId": {
              "type": "string"
            },
            "ResourceIdPrometheusWorkspace": {
              "type": "string"
            }
          },
          "variables": {
            "resourceNameGrafana": "[format('GR-KubernetesDemo-{0}', parameters('Environment'))]",
            "roleIdGrafanaAdmin": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41', subscription().id)]"
          },
          "resources": [
            {
              "type": "Microsoft.Dashboard/grafana",
              "apiVersion": "2022-08-01",
              "name": "[variables('resourceNameGrafana')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "sku": {
                "name": "Standard"
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "apiKey": "Enabled",
                "autoGeneratedDomainNameLabelScope": "TenantReuse",
                "deterministicOutboundIP": "Disabled",
                "grafanaIntegrations": {
                  "azureMonitorWorkspaceIntegrations": [
                    {
                      "azureMonitorWorkspaceResourceId": "[parameters('ResourceIdPrometheusWorkspace')]"
                    }
                  ]
                },
                "publicNetworkAccess": "Enabled",
                "zoneRedundancy": "Disabled"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdGrafanaAdmin'), parameters('AdminGroupObjectId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdGrafanaAdmin')]",
                "principalId": "[parameters('AdminGroupObjectId')]",
                "principalType": "Group"
              }
            }
          ],
          "outputs": {
            "resourceIdGrafana": {
              "type": "string",
              "value": "[resourceId('Microsoft.Dashboard/grafana', variables('resourceNameGrafana'))]"
            },
            "resourceNameGrafana": {
              "type": "string",
              "value": "[variables('resourceNameGrafana')]"
            },
            "principalIdGrafana": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Dashboard/grafana', variables('resourceNameGrafana')), '2022-08-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'modulePrometheus')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleResourceGroupPermissionsGrafana",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "PrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleGrafana'), '2022-09-01').outputs.principalIdGrafana.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "11036403564196402768"
            }
          },
          "parameters": {
            "PrincipalId": {
              "type": "string"
            }
          },
          "variables": {
            "roleIdMonitoringReader": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05', subscription().id)]",
            "roleIdMonitoringDataReader": "[format('{0}/providers/Microsoft.Authorization/roleDefinitions/b0d8363b-8ddd-447d-831f-62ca05bff136', subscription().id)]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdMonitoringReader'), parameters('PrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdMonitoringReader')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(subscription().subscriptionId, resourceGroup().id, variables('roleIdMonitoringDataReader'), parameters('PrincipalId'))]",
              "properties": {
                "roleDefinitionId": "[variables('roleIdMonitoringDataReader')]",
                "principalId": "[parameters('PrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'moduleGrafana')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "moduleKubernetes",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Location": {
            "value": "[parameters('Location')]"
          },
          "Environment": {
            "value": "[parameters('Environment')]"
          },
          "Tags": {
            "value": "[variables('Tags')]"
          },
          "TenantId": {
            "value": "[parameters('TenantId')]"
          },
          "AdminGroupObjectId": {
            "value": "[parameters('AdminGroupObjectId')]"
          },
          "KubernetesVersion": {
            "value": "[parameters('KubernetesVersion')]"
          },
          "NodeSizeDemoPool": {
            "value": "[parameters('NodeSizeDemoPool')]"
          },
          "NodeSizeSystemPool": {
            "value": "[parameters('NodeSizeSystemPool')]"
          },
          "InitialNodeCountDemoPool": {
            "value": "[parameters('InitialNodeCountDemoPool')]"
          },
          "MaximumNodeCountDemoPool": {
            "value": "[parameters('MaximumNodeCountDemoPool')]"
          },
          "MinimumNodeCountDemoPool": {
            "value": "[parameters('MinimumNodeCountDemoPool')]"
          },
          "ResourceIdsManagedIdentity": {
            "value": [
              "[reference(resourceId('Microsoft.Resources/deployments', 'moduleManagedIdentityControlPlane'), '2022-09-01').outputs.ResourceIdManagedIdentity.value]"
            ]
          },
          "ResourceIdDataCollectionRule": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'modulePrometheus'), '2022-09-01').outputs.ResourceIdDataCollectionRule.value]"
          },
          "ResourceIdLogAnalytics": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleLogAnalytics'), '2022-09-01').outputs.ResourceIdLogAnalytics.value]"
          },
          "ResourceNameLogAnalytics": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleLogAnalytics'), '2022-09-01').outputs.ResourceNameLogAnalytics.value]"
          },
          "ResourceIdVirtualNetwork": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork'), '2022-09-01').outputs.ResourceIdVirtualNetwork.value]"
          },
          "ResourceNameSubnetDemoNode": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork'), '2022-09-01').outputs.ResourceNameSubnetDemoNode.value]"
          },
          "ResourceNameSubnetDemoPod": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork'), '2022-09-01').outputs.ResourceNameSubnetDemoPod.value]"
          },
          "ResourceNameSubnetSystemNode": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork'), '2022-09-01').outputs.ResourceNameSubnetSystemNode.value]"
          },
          "ResourceNameSubnetSystemPod": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork'), '2022-09-01').outputs.ResourceNameSubnetSystemPod.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.22.6.54827",
              "templateHash": "11373364069538725272"
            }
          },
          "parameters": {
            "Environment": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            },
            "Tags": {
              "type": "object"
            },
            "NodeSizeSystemPool": {
              "type": "string",
              "allowedValues": [
                "Standard_D8ads_v5",
                "Standard_D4ads_v5",
                "Standard_D2ads_v5",
                "Standard_E8ads_v5",
                "Standard_E4ads_v5",
                "Standard_E2ads_v5"
              ]
            },
            "NodeSizeDemoPool": {
              "type": "string",
              "allowedValues": [
                "Standard_D8ads_v5",
                "Standard_D4ads_v5",
                "Standard_D2ads_v5",
                "Standard_E8ads_v5",
                "Standard_E4ads_v5",
                "Standard_E2ads_v5"
              ]
            },
            "InitialNodeCountDemoPool": {
              "type": "int"
            },
            "MinimumNodeCountDemoPool": {
              "type": "int"
            },
            "MaximumNodeCountDemoPool": {
              "type": "int"
            },
            "KubernetesVersion": {
              "type": "string"
            },
            "AdminGroupObjectId": {
              "type": "string"
            },
            "TenantId": {
              "type": "string"
            },
            "ResourceIdLogAnalytics": {
              "type": "string"
            },
            "ResourceNameLogAnalytics": {
              "type": "string"
            },
            "ResourceIdVirtualNetwork": {
              "type": "string"
            },
            "ResourceIdsManagedIdentity": {
              "type": "array"
            },
            "ResourceNameSubnetSystemNode": {
              "type": "string"
            },
            "ResourceNameSubnetSystemPod": {
              "type": "string"
            },
            "ResourceNameSubnetDemoNode": {
              "type": "string"
            },
            "ResourceNameSubnetDemoPod": {
              "type": "string"
            },
            "ResourceIdDataCollectionRule": {
              "type": "string"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "ResourceIdsManagedIdentityFormatArray",
                "count": "[length(parameters('ResourceIdsManagedIdentity'))]",
                "input": {
                  "[format('{0}', parameters('ResourceIdsManagedIdentity')[copyIndex('ResourceIdsManagedIdentityFormatArray')])]": {}
                }
              }
            ],
            "resourceNameAks": "[format('AKS-KubernetesDemo-{0}-01', parameters('Environment'))]",
            "resourceGroupNameAksNode": "[format('RG-KubernetesDemo-{0}', parameters('Environment'))]",
            "resourceNameDcr": "[format('MSCI-{0}-{1}', parameters('Location'), variables('resourceNameAks'))]",
            "ResourceIdsManagedIdentityFormatObject": "[replace(replace(replace(string(variables('ResourceIdsManagedIdentityFormatArray')), '[{', '{'), '}},{', '},'), '}]', '}')]",
            "ResourceIdsManagedIdentityFormatJson": "[json(variables('ResourceIdsManagedIdentityFormatObject'))]",
            "ephemeralDiskSizeMappingGb": {
              "Standard_D8ads_v5": 300,
              "Standard_D4ads_v5": 150,
              "Standard_D2ads_v5": 75,
              "Standard_E8ads_v5": 300,
              "Standard_E4ads_v5": 150,
              "Standard_E2ads_v5": 75
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerService/managedClusters",
              "apiVersion": "2022-11-02-preview",
              "name": "[variables('resourceNameAks')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "properties": {
                "kubernetesVersion": "[parameters('KubernetesVersion')]",
                "dnsPrefix": "[uniqueString(subscription().subscriptionId, resourceGroup().name, variables('resourceNameAks'))]",
                "agentPoolProfiles": [
                  {
                    "name": "system",
                    "count": 3,
                    "minCount": 3,
                    "maxCount": 6,
                    "enableAutoScaling": true,
                    "vmSize": "[parameters('NodeSizeSystemPool')]",
                    "osDiskType": "Ephemeral",
                    "osDiskSizeGB": "[variables('ephemeralDiskSizeMappingGb')[parameters('NodeSizeSystemPool')]]",
                    "osType": "Linux",
                    "vnetSubnetID": "[format('{0}/subnets/{1}', parameters('ResourceIdVirtualNetwork'), parameters('ResourceNameSubnetSystemNode'))]",
                    "podSubnetID": "[format('{0}/subnets/{1}', parameters('ResourceIdVirtualNetwork'), parameters('ResourceNameSubnetSystemPod'))]",
                    "type": "VirtualMachineScaleSets",
                    "mode": "System",
                    "scaleSetPriority": "Regular",
                    "scaleSetEvictionPolicy": "Delete",
                    "orchestratorVersion": "[parameters('KubernetesVersion')]",
                    "enableNodePublicIP": false,
                    "maxPods": 40,
                    "availabilityZones": "[pickZones('Microsoft.Compute', 'virtualMachineScaleSets', parameters('Location'), 3)]",
                    "upgradeSettings": {
                      "maxSurge": "33%"
                    },
                    "nodeTaints": [
                      "CriticalAddonsOnly=true:NoSchedule"
                    ],
                    "nodeLabels": {
                      "nodetype": "system"
                    }
                  }
                ],
                "servicePrincipalProfile": {
                  "clientId": "msi"
                },
                "addonProfiles": {
                  "httpApplicationRouting": {
                    "enabled": false
                  },
                  "omsagent": {
                    "enabled": true,
                    "config": {
                      "logAnalyticsWorkspaceResourceId": "[parameters('ResourceIdLogAnalytics')]",
                      "useAADAuth": "true"
                    }
                  },
                  "aciConnectorLinux": {
                    "enabled": false
                  },
                  "azurepolicy": {
                    "enabled": true,
                    "config": {
                      "version": "v2"
                    }
                  }
                },
                "nodeResourceGroup": "[variables('resourceGroupNameAksNode')]",
                "enableRBAC": true,
                "networkProfile": {
                  "networkPlugin": "azure",
                  "networkPolicy": "azure",
                  "serviceCidr": "172.16.0.0/16",
                  "dnsServiceIP": "172.16.0.10",
                  "dockerBridgeCidr": "172.18.0.1/16",
                  "loadBalancerSku": "standard",
                  "outboundType": "loadBalancer"
                },
                "aadProfile": {
                  "managed": true,
                  "enableAzureRBAC": false,
                  "adminGroupObjectIDs": [
                    "[parameters('AdminGroupObjectId')]"
                  ],
                  "tenantID": "[parameters('TenantId')]"
                },
                "autoScalerProfile": {
                  "balance-similar-node-groups": "false",
                  "expander": "random",
                  "max-empty-bulk-delete": "10",
                  "max-graceful-termination-sec": "600",
                  "max-node-provision-time": "15m",
                  "max-total-unready-percentage": "45",
                  "new-pod-scale-up-delay": "0s",
                  "ok-total-unready-count": "3",
                  "scale-down-delay-after-add": "5m",
                  "scale-down-delay-after-delete": "20s",
                  "scale-down-delay-after-failure": "3m",
                  "scale-down-unneeded-time": "5m",
                  "scale-down-unready-time": "20m",
                  "scale-down-utilization-threshold": "0.5",
                  "scan-interval": "10s",
                  "skip-nodes-with-local-storage": "true",
                  "skip-nodes-with-system-pods": "true"
                },
                "oidcIssuerProfile": {
                  "enabled": true
                },
                "podIdentityProfile": {
                  "enabled": false
                },
                "disableLocalAccounts": true,
                "securityProfile": {
                  "workloadIdentity": {
                    "enabled": true
                  },
                  "defender": {
                    "logAnalyticsWorkspaceResourceId": "[parameters('ResourceIdLogAnalytics')]",
                    "securityMonitoring": {
                      "enabled": true
                    }
                  }
                },
                "azureMonitorProfile": {
                  "metrics": {
                    "enabled": true,
                    "kubeStateMetrics": {
                      "metricLabelsAllowlist": "",
                      "metricAnnotationsAllowList": ""
                    }
                  }
                }
              },
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": "[variables('ResourceIdsManagedIdentityFormatJson')]"
              },
              "sku": {
                "name": "Basic",
                "tier": "Free"
              }
            },
            {
              "type": "Microsoft.ContainerService/managedClusters/agentPools",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', variables('resourceNameAks'), 'demo')]",
              "properties": {
                "count": "[parameters('InitialNodeCountDemoPool')]",
                "minCount": "[parameters('MinimumNodeCountDemoPool')]",
                "maxCount": "[parameters('MaximumNodeCountDemoPool')]",
                "enableAutoScaling": true,
                "vmSize": "[parameters('NodeSizeDemoPool')]",
                "osDiskType": "Ephemeral",
                "osDiskSizeGB": "[variables('ephemeralDiskSizeMappingGb')[parameters('NodeSizeDemoPool')]]",
                "osType": "Linux",
                "vnetSubnetID": "[format('{0}/subnets/{1}', parameters('ResourceIdVirtualNetwork'), parameters('ResourceNameSubnetDemoNode'))]",
                "podSubnetID": "[format('{0}/subnets/{1}', parameters('ResourceIdVirtualNetwork'), parameters('ResourceNameSubnetDemoPod'))]",
                "type": "VirtualMachineScaleSets",
                "mode": "User",
                "scaleSetPriority": "Regular",
                "scaleSetEvictionPolicy": "Delete",
                "orchestratorVersion": "[parameters('KubernetesVersion')]",
                "enableNodePublicIP": false,
                "maxPods": 50,
                "availabilityZones": "[pickZones('Microsoft.Compute', 'virtualMachineScaleSets', parameters('Location'), 3)]",
                "upgradeSettings": {
                  "maxSurge": "33%"
                },
                "nodeLabels": {
                  "nodetype": "app"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('resourceNameAks'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRules",
              "apiVersion": "2022-06-01",
              "name": "[variables('resourceNameDcr')]",
              "location": "[parameters('Location')]",
              "tags": "[parameters('Tags')]",
              "kind": "Linux",
              "properties": {
                "dataSources": {
                  "extensions": [
                    {
                      "name": "ContainerInsightsExtension",
                      "streams": [
                        "Microsoft-ContainerLogV2",
                        "Microsoft-KubeEvents",
                        "Microsoft-KubePodInventory",
                        "Microsoft-KubeNodeInventory",
                        "Microsoft-KubeMonAgentEvents"
                      ],
                      "extensionSettings": {
                        "dataCollectionSettings": {
                          "interval": "1m",
                          "namespaceFilteringMode": "Off",
                          "namespaces": [],
                          "enableContainerLogV2": true
                        }
                      },
                      "extensionName": "ContainerInsights"
                    }
                  ]
                },
                "destinations": {
                  "logAnalytics": [
                    {
                      "workspaceResourceId": "[parameters('ResourceIdLogAnalytics')]",
                      "name": "[parameters('ResourceNameLogAnalytics')]"
                    }
                  ]
                },
                "dataFlows": [
                  {
                    "streams": [
                      "Microsoft-KubeEvents",
                      "Microsoft-KubePodInventory",
                      "Microsoft-KubeNodeInventory",
                      "Microsoft-KubeMonAgentEvents"
                    ],
                    "destinations": [
                      "[parameters('ResourceNameLogAnalytics')]"
                    ]
                  },
                  {
                    "streams": [
                      "Microsoft-ContainerLogV2"
                    ],
                    "destinations": [
                      "[parameters('ResourceNameLogAnalytics')]"
                    ]
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-09-01-preview",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', variables('resourceNameAks'))]",
              "name": "ContainerInsightsExtension",
              "properties": {
                "description": "Association of data collection rule. Deleting this association will break the data collection for this AKS Cluster.",
                "dataCollectionRuleId": "[resourceId('Microsoft.Insights/dataCollectionRules', variables('resourceNameDcr'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/dataCollectionRules', variables('resourceNameDcr'))]",
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('resourceNameAks'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/dataCollectionRuleAssociations",
              "apiVersion": "2021-09-01-preview",
              "scope": "[format('Microsoft.ContainerService/managedClusters/{0}', variables('resourceNameAks'))]",
              "name": "[format('{0}-{1}', split(parameters('ResourceIdDataCollectionRule'), '/')[8], split(resourceId('Microsoft.ContainerService/managedClusters', variables('resourceNameAks')), '/')[8])]",
              "properties": {
                "description": "Association of data collection rule. Deleting this association will break the data collection for this AKS Cluster.",
                "dataCollectionRuleId": "[parameters('ResourceIdDataCollectionRule')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerService/managedClusters', variables('resourceNameAks'))]"
              ]
            }
          ],
          "outputs": {
            "PrincipalIdAgentPool": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('resourceNameAks')), '2022-11-02-preview').identityProfile.kubeletidentity.objectId]"
            },
            "ResourceNameAksCluster": {
              "type": "string",
              "value": "[variables('resourceNameAks')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'moduleLogAnalytics')]",
        "[resourceId('Microsoft.Resources/deployments', 'moduleManagedIdentityControlPlane')]",
        "[resourceId('Microsoft.Resources/deployments', 'modulePrometheus')]",
        "[resourceId('Microsoft.Resources/deployments', 'moduleResourceGroupPermissionsControlPlane')]",
        "[resourceId('Microsoft.Resources/deployments', 'moduleVirtualNetwork')]"
      ]
    }
  ]
}